<!DOCTYPE html>
<!-- saved from url=(0036)https://adventofcode.com/2017/day/23 -->
<html lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Day 23 - Advent of Code 2017</title>
<!--[if lt IE 9]><script src="/static/html5.js"></script><![endif]-->
<link href="./Day 23 - Advent of Code 2017_files/css" rel="stylesheet" type="text/css">
<link rel="stylesheet" type="text/css" href="./Day 23 - Advent of Code 2017_files/style.css">
<link rel="stylesheet alternate" type="text/css" href="./Day 23 - Advent of Code 2017_files/highcontrast.css" title="High Contrast">
<link rel="shortcut icon" href="https://adventofcode.com/favicon.ico?2">
</head><!--




Oh, hello!  Funny seeing you here.

I appreciate your enthusiasm, but you aren't going to find much down here.
There certainly aren't clues to any of the puzzles.  The best surprises don't
even appear in the source until you unlock them for real.

Please be careful with automated requests; I'm not Google, and I can only take
so much traffic.  Please be considerate so that everyone gets to play.

If you're curious about how Advent of Code works, it's running on some custom
Perl code. Other than a few integrations (auth, analytics, ads, social media),
I built the whole thing myself, including the design, animations, prose, and
all of the puzzles.

The puzzles are most of the work; the easiest ones take 3-4 hours each, but the
harder ones take 6-8 hours, and a few even longer than that. A lot of effort
went into building this thing - I hope you're enjoying playing it as much as I
enjoyed making it for you!

If you'd like to hang out, I'm @ericwastl on Twitter.

- Eric Wastl


















































-->
<body>
<header><div><h1 class="title-global"><a href="https://adventofcode.com/">Advent of Code</a></h1><nav><ul><li><a href="https://adventofcode.com/2017/about">[About]</a></li><li><a href="https://adventofcode.com/2017/events">[Events]</a></li><li><a href="https://teespring.com/adventofcode" target="_blank">[Shop]</a></li><li><a href="https://adventofcode.com/2017/settings">[Settings]</a></li><li><a href="https://adventofcode.com/2017/auth/logout">[Log Out]</a></li></ul></nav><div class="user">Sam Lindsay-Levine <span class="star-count">48*</span></div></div><div><h1 class="title-event">&nbsp;&nbsp;&nbsp;<span class="title-event-wrap">sub y{</span><a href="https://adventofcode.com/2017">2017</a><span class="title-event-wrap">}</span></h1><nav><ul><li><a href="https://adventofcode.com/2017">[Calendar]</a></li><li><a href="https://adventofcode.com/2017/support">[AoC++]</a></li><li><a href="https://adventofcode.com/2017/sponsors">[Sponsors]</a></li><li><a href="https://adventofcode.com/2017/leaderboard">[Leaderboard]</a></li><li><a href="https://adventofcode.com/2017/stats">[Stats]</a></li></ul></nav></div></header>

<div id="sidebar">
<div id="sponsor"><div class="quiet">Our <a href="https://adventofcode.com/2017/sponsors">sponsors</a> help make Advent of Code possible:</div><p><a href="http://kx.com/" target="_blank" onclick="if(ga)ga(&#39;send&#39;,&#39;event&#39;,&#39;sponsor&#39;,&#39;click&#39;,this.href);" rel="noopener">Kx Systems</a> - kdb+, the in-memory time series technology standard</p></div>
</div><!--/sidebar-->

<main>
<article class="day-desc"><h2>--- Day 23: Coprocessor Conflagration ---</h2><p>You decide to head directly to the CPU and fix the printer from there. As you get close, you find an <em>experimental coprocessor</em> doing so much work that the local programs are afraid it will <a href="https://en.wikipedia.org/wiki/Halt_and_Catch_Fire">halt and catch fire</a>. This would cause serious issues for the rest of the computer, so you head in and see what you can do.</p>
<p>The code it's running seems to be a variant of the kind you saw recently on that <a href="https://adventofcode.com/2017/day/18">tablet</a>. The general functionality seems <em>very similar</em>, but some of the instructions are different:</p>
<ul>
<li><code>set X Y</code> <em>sets</em> register <code>X</code> to the value of <code>Y</code>.</li>
<li><code>sub X Y</code> <em>decreases</em> register <code>X</code> by the value of <code>Y</code>.</li>
<li><code>mul X Y</code> sets register <code>X</code> to the result of <em>multiplying</em> the value contained in register <code>X</code> by the value of <code>Y</code>.</li>
<li><code>jnz X Y</code> <em>jumps</em> with an offset of the value of <code>Y</code>, but only if the value of <code>X</code> is <em>not zero</em>. (An offset of <code>2</code> skips the next instruction, an offset of <code>-1</code> jumps to the previous instruction, and so on.)</li>
<p>Only the instructions listed above are used. The eight registers here, named <code>a</code> through <code>h</code>, all start at <code>0</code>.</p>
</ul>
<p>The coprocessor is currently set to some kind of <em>debug mode</em>, which allows for testing, but prevents it from doing any meaningful work.</p>
<p>If you run the program (your puzzle input), <em>how many times is the <code>mul</code> instruction invoked?</em></p>
</article>
<p>Your puzzle answer was <code>8281</code>.</p><article class="day-desc"><h2 id="part2">--- Part Two ---</h2><p>Now, it's time to fix the problem.</p>
<p>The <em>debug mode switch</em> is wired directly to register <code>a</code>.  You <span title="From &#39;magic&#39; to &#39;more magic&#39;.">flip the switch</span>, which makes <em>register <code>a</code> now start at <code>1</code></em> when the program is executed.</p>
<p>Immediately, the coprocessor begins to overheat.  Whoever wrote this program obviously didn't choose a very efficient implementation.  You'll need to <em>optimize the program</em> if it has any hope of completing before Santa needs that printer working.</p>
<p>The coprocessor's ultimate goal is to determine the final value left in register <code>h</code> once the program completes. Technically, if it had that... it wouldn't even need to run the program.</p>
<p>After setting register <code>a</code> to <code>1</code>, if the program were to run to completion, <em>what value would be left in register <code>h</code>?</em></p>
</article>
<p>Your puzzle answer was <code>911</code>.</p><p class="day-success">Both parts of this puzzle are complete! They provide two gold stars: **</p>
<p>At this point, you should <a href="https://adventofcode.com/2017">return to your advent calendar</a> and try another puzzle.</p>
<p>If you still want to see it, you can <a href="https://adventofcode.com/2017/day/23/input" target="_blank">get your puzzle input</a>.</p>
<p>You can also <span class="share">[Share<span class="share-content">on
  <a href="https://twitter.com/intent/tweet?text=I%27ve+completed+%22Coprocessor+Conflagration%22+%2D+Day+23+%2D+Advent+of+Code+2017&amp;url=https%3A%2F%2Fadventofcode%2Ecom%2F2017%2Fday%2F23&amp;related=ericwastl&amp;hashtags=AdventOfCode" target="_blank">Twitter</a>
  <a href="http://www.reddit.com/submit?url=https%3A%2F%2Fadventofcode%2Ecom%2F2017%2Fday%2F23&amp;title=I%27ve+completed+%22Coprocessor+Conflagration%22+%2D+Day+23+%2D+Advent+of+Code+2017" target="_blank">Reddit</a></span>]</span> this puzzle.</p>
</main>

<!-- ga -->
<script async="" src="./Day 23 - Advent of Code 2017_files/analytics.js"></script><script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-69522494-1', 'auto');
ga('send', 'pageview');
</script>
<!-- /ga -->

</body></html>